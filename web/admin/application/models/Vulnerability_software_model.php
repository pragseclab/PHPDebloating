<?php
/*
 * Generated by CRUDigniter v3.2
 * www.crudigniter.com
 */

class Vulnerability_software_model extends CI_Model
{
    function __construct()
    {
        parent::__construct();
    }

    /*
     * Get vulnerability_software by id
     */
    function get_vulnerability_software($id)
    {
        return $this->db->get_where('vulnerability_software',array('id'=>$id))->row_array();
    }

    /*
     * Get all vulnerability_software
     */
    function get_all_vulnerability_software()
    {
        $this->db->select('vulnerability_software.id, vulnerabilities.cve, software.name, software_version.version')
         ->from('vulnerability_software')
         ->join('software_version', 'vulnerability_software.fk_version_id = software_version.id')
         ->join('software', 'software_version.fk_software_id = software.id')
         ->join('vulnerabilities', 'vulnerability_software.fk_vulnerability_id = vulnerabilities.id')
         ->order_by('id', 'desc');
        return $this->db->get()->result_array();
    }

    /*
     * Get all vulnerabilities triggered by tests filtered by tests.test_group
     */
    function get_covered_vulnerabilities_id_by_test_group($id=null)
    {
        if ($id == null)
          return null;
        else
        {
            $this->db->distinct();
            $this->db->select('vulnerability_software.id')
             ->from('covered_files')
             ->join('tests', 'tests.id = covered_files.fk_test_id')
             ->where('INSTR(tests.test_group, "'.$id.'") > 0')
             ->join('vulnerable_files', 'INSTR(covered_files.file_name, vulnerable_files.file_name) > 0')
             ->join('vulnerability_software', 'vulnerability_software.id = vulnerable_files.fk_vulnerability_software')
             ->where('tests.fk_software_version_id = vulnerability_software.fk_version_id')
             //->join('vulnerabilities', 'vulnerabilities.id = vulnerability_software.fk_vulnerability_id')
             //->join('software_version', 'software_version.id = vulnerability_software.fk_version_id')
             //->join('software', 'software.id = software_version.fk_software_id')
             ->order_by('id', 'desc');
           return $this->db->get()->result_array();
        }
    }

    /*
     * Get all vulnerabilities for software being tested
     */
    function get_covered_vulnerabilities_by_test_group($id=null)
    {
        if ($id == null)
          return null;
        else
        {
            $this->db->distinct();
            $this->db->select('vulnerability_software.id, vulnerabilities.cve, software.name, software_version.version')
             ->from('tests')
             ->where('INSTR(tests.test_group, "'.$id.'") > 0')
             ->join('vulnerability_software', 'vulnerability_software.fk_version_id = tests.fk_software_version_id')
             ->where('tests.fk_software_version_id = vulnerability_software.fk_version_id')
             ->join('vulnerabilities', 'vulnerabilities.id = vulnerability_software.fk_vulnerability_id')
             ->join('software_version', 'software_version.id = vulnerability_software.fk_version_id')
             ->join('software', 'software.id = software_version.fk_software_id')
             ->order_by('id', 'desc');
           return $this->db->get()->result_array();
        }
    }

    /*
     * function to add new vulnerability_software
     */
    function add_vulnerability_software($params)
    {
        $this->db->insert('vulnerability_software',$params);
        return $this->db->insert_id();
    }

    /*
     * function to update vulnerability_software
     */
    function update_vulnerability_software($id,$params)
    {
        $this->db->where('id',$id);
        return $this->db->update('vulnerability_software',$params);
    }

    /*
     * function to delete vulnerability_software
     */
    function delete_vulnerability_software($id)
    {
        return $this->db->delete('vulnerability_software',array('id'=>$id));
    }
}
